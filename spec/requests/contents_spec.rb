require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/contents", type: :request do
  # Helper method to stub OpenAI API calls for embeddings
  def stub_openai_embedding_api
    # Create a mock embedding vector with 1536 dimensions
    mock_embedding = Array.new(1536) { rand(-1.0..1.0) }
    
    # Stub any OpenAI embedding API call with a valid response
    stub_request(:post, "https://api.openai.com/v1/embeddings")
      .with(
        body: hash_including({
          "model" => "text-embedding-3-small"
        })
      )
      .to_return(
        status: 200,
        body: {
          "data" => [
            {
              "embedding" => mock_embedding,
              "index" => 0,
              "object" => "embedding"
            }
          ],
          "model" => "text-embedding-3-small",
          "object" => "list",
          "usage" => {
            "prompt_tokens" => 5,
            "total_tokens" => 5
          }
        }.to_json,
        headers: { 'Content-Type' => 'application/json' }
      )
  end
  
  # Stub OpenAI API calls before each test
  before(:each) do
    stub_openai_embedding_api
  end
  
  # This should return the minimal set of attributes required to create a valid
  # Content. As you add validations to Content, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes)   { { note: "A valid note" } }
  let(:invalid_attributes) { { note: "" } } # no files

  let(:file_fixture_path) { Rails.root.join("spec/fixtures/files/test.txt") }
  let(:file_upload) { fixture_file_upload(file_fixture_path, 'text/plain') }
  let(:file_only_attributes) { { note: "", files: [file_upload] } }
  let(:both_attributes) { { note: "A valid note", files: [file_upload] } }

  describe "GET /index" do
    it "renders a successful response" do
      Content.create! valid_attributes
      get contents_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      content = Content.create! valid_attributes
      get content_url(content)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_content_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      content = Content.create! valid_attributes
      get edit_content_url(content)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Content" do
        expect {
          post contents_url, params: { content: valid_attributes }
        }.to change(Content, :count).by(1)
      end

      it "redirects to the created content" do
        post contents_url, params: { content: valid_attributes }
        expect(response).to redirect_to(content_url(Content.last))
      end
    end

    context "with only note" do
      it "creates a new Content with only a note" do
        expect {
          post contents_url, params: { content: valid_attributes }
        }.to change(Content, :count).by(1)
      end
      it "redirects to the created content" do
        post contents_url, params: { content: valid_attributes }
        expect(response).to redirect_to(content_url(Content.last))
      end
    end

    context "with only file(s)" do
      it "creates a new Content with only files" do
        expect {
          post contents_url, params: { content: file_only_attributes }
        }.to change(Content, :count).by(1)
      end
      it "redirects to the created content" do
        post contents_url, params: { content: file_only_attributes }
        expect(response).to redirect_to(content_url(Content.last))
      end
    end

    context "with note and file(s)" do
      it "creates a new Content with both note and files" do
        expect {
          post contents_url, params: { content: both_attributes }
        }.to change(Content, :count).by(1)
      end
      it "redirects to the created content" do
        post contents_url, params: { content: both_attributes }
        expect(response).to redirect_to(content_url(Content.last))
      end
    end

    context "with neither note nor files" do
      it "does not create a new Content" do
        expect {
          post contents_url, params: { content: { note: "" } }
        }.not_to change(Content, :count)
      end
      it "renders a response with 422 status (unprocessable_entity)" do
        post contents_url, params: { content: { note: "" } }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) { { note: "An updated note" } }

      it "updates the requested content" do
        content = Content.create! valid_attributes
        patch content_url(content), params: { content: new_attributes }
        content.reload
        expect(content.note).to eq("An updated note")
      end

      it "redirects to the content" do
        content = Content.create! valid_attributes
        patch content_url(content), params: { content: new_attributes }
        content.reload
        expect(response).to redirect_to(content_url(content))
      end
    end

    context "with only note" do
      it "updates the requested content with only a note" do
        content = Content.create! file_only_attributes
        patch content_url(content), params: { content: valid_attributes }
        content.reload
        expect(content.note).to eq(valid_attributes[:note])
        expect(response).to redirect_to(content_url(content))
      end
    end

    context "with only file(s)" do
      it "updates the requested content with only files" do
        content = Content.create! valid_attributes
        patch content_url(content), params: { content: file_only_attributes }
        content.reload
        expect(content.files).to be_attached
        expect(response).to redirect_to(content_url(content))
      end
    end

    context "with neither note nor files" do
      it "does not update the content and renders 422" do
        content = Content.create! valid_attributes
        patch content_url(content), params: { content: { note: "" } }
        content.reload
        expect(content.note).not_to eq("")
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested content" do
      content = Content.create! valid_attributes
      expect {
        delete content_url(content)
      }.to change(Content, :count).by(-1)
    end

    it "redirects to the contents list" do
      content = Content.create! valid_attributes
      delete content_url(content)
      expect(response).to redirect_to(contents_url)
    end
  end
end
