# Personal Knowledge Graph Taxonomy
# A flexible schema for organizing personal information with dynamic properties
# Version: 2.0.0 - Simplified Entity Model
# Last Updated: 2025-07-15

# ======================
# DESIGN PHILOSOPHY
# ======================
# This taxonomy uses a small set of generic entities with:
# 1. CORE PROPERTIES: Required fields for all entities of this type
# 2. STANDARD PROPERTIES: Common optional fields with validation
# 3. DYNAMIC PROPERTIES: Unlimited custom properties stored as JSONB
#
# Example: An "Item" could be a car, laptop, book, or anything else
# - Core: name, type, created_at
# - Standard: description, value, location
# - Dynamic: {make: "Toyota", model: "Camry", year: 2020} for car
#           {brand: "Apple", storage: "512GB", os: "macOS"} for laptop

# ======================
# CORE ENTITY TYPES
# ======================
# - Person: Human beings and contacts
# - Location: Physical places and addresses  
# - Item: Physical, tangible objects
# - DigitalItem: Digital files and online resources
# - Activity: Events, tasks, and time-based activities
# - Collection: Groups and lists of related entities
# - Information: Knowledge, notes, and ideas

Person:
  description: >
    Any human being - family, friends, colleagues, service providers, contacts.
    Represents people you interact with or reference in your personal knowledge graph.
  
  core_properties:
    name:
      type: String
      required: true
      description: Full display name (e.g., "Dr. Jane Smith", "John")
    
    created_at:
      type: DateTime
      required: true
      description: When this person was added to the knowledge graph
    
    updated_at:
      type: DateTime
      required: true
      description: When this person's information was last modified

  standard_properties:
    first_name:
      type: String
      description: First/given name
    
    last_name:
      type: String
      description: Last/family name
    
    email:
      type: Email
      description: Primary email address
    
    phone:
      type: String
      description: Primary phone number
    
    relationship:
      type: String
      description: Relationship to you (family, friend, colleague, etc.)
    
    notes:
      type: Text
      description: Personal notes about this person

  dynamic_properties:
    description: >
      Unlimited custom properties stored as JSONB. Examples:
      - {middle_name: "Alexander", nickname: "Alex"}
      - {birthday: "1985-03-15", zodiac_sign: "Pisces"}
      - {company: "Acme Corp", job_title: "Senior Engineer"}
      - {social_media: {twitter: "@john", linkedin: "john-smith"}}
      - {preferences: {coffee: "black", music: ["jazz", "rock"]}}

  relations:
    KNOWS:
      to: Person
      cardinality: many
      symmetric: true
      description: Personal or professional relationship
    
    LIVES_AT:
      to: Location
      cardinality: many
      description: Current or past residences
    
    WORKS_AT:
      to: Location
      cardinality: many
      description: Current or past workplaces
    
    OWNS:
      to: [Item, DigitalItem]
      cardinality: many
      description: Things this person owns (physical and digital)
    
    PARTICIPATES_IN:
      to: Activity
      cardinality: many
      description: Events, meetings, activities they're involved in

Location:
  description: >
    Any physical place - addresses, buildings, venues, geographic locations.
    Can be specific (123 Main St) or general (Central Park, Tokyo).
  
  core_properties:
    name:
      type: String
      required: true
      description: Display name for this location
    
    created_at:
      type: DateTime
      required: true
    
    updated_at:
      type: DateTime
      required: true

  standard_properties:
    address:
      type: String
      description: Full street address
    
    city:
      type: String
      description: City or locality
    
    state:
      type: String
      description: State, province, or region
    
    country:
      type: String
      description: Country name
    
    postal_code:
      type: String
      description: ZIP code or postal code
    
    location_type:
      type: String
      description: Type of location (home, office, restaurant, park, etc.)
    
    coordinates:
      type: String
      description: GPS coordinates (lat,lng)

  dynamic_properties:
    description: >
      Custom location-specific properties. Examples:
      - {apartment_number: "4B", floor: 3, building_name: "Sunset Towers"}
      - {hours: "9am-5pm", phone: "+1-555-123-4567", website: "example.com"}
      - {parking: "street only", wheelchair_accessible: true}
      - {capacity: 200, amenities: ["wifi", "projector", "catering"]}

  relations:
    CONTAINS:
      to: Location
      cardinality: many
      description: Sub-locations within this location
    
    NEAR:
      to: Location
      cardinality: many
      symmetric: true
      description: Geographically close locations
    
    HOSTS:
      to: Activity
      cardinality: many
      description: Events or activities held at this location

Item:
  description: >
    Any physical, tangible object - vehicles, tools, furniture, possessions.
    For digital files, photos, and documents, use DigitalItem instead.
  
  core_properties:
    name:
      type: String
      required: true
      description: Item name or title
    
    item_type:
      type: String
      required: true
      description: High-level category (vehicle, electronics, furniture, tool, etc.)
    
    created_at:
      type: DateTime
      required: true
    
    updated_at:
      type: DateTime
      required: true

  standard_properties:
    description:
      type: Text
      description: Detailed description of the item
    
    value:
      type: Number
      description: Estimated value in base currency
    
    purchase_date:
      type: Date
      description: When this item was acquired
    
    purchase_price:
      type: Number
      description: Original purchase price
    
    condition:
      type: String
      description: Current physical condition (new, excellent, good, fair, poor)
    
    status:
      type: String
      description: Current status (owned, sold, lost, borrowed, etc.)
    
    physical_location:
      type: String
      description: Where the item is currently located

  dynamic_properties:
    description: >
      Physical item-specific properties stored as JSONB. Examples:
      
      Vehicle: {make: "Toyota", model: "Camry", year: 2020, mileage: 45000, vin: "123ABC", license_plate: "ABC123"}
      
      Electronics: {brand: "Apple", model: "MacBook Pro", serial: "ABC123", storage: "512GB", warranty_expires: "2025-12-01"}
      
      Furniture: {material: "oak", dimensions: "72x36x30", weight: "150lbs", room: "dining_room"}
      
      Tool: {brand: "DeWalt", model: "DCD771C2", battery_type: "20V", last_maintenance: "2025-06-01"}
      
      Collectible: {artist: "Picasso", year: 1950, medium: "oil", dimensions: "24x36", authenticated: true}

  relations:
    OWNED_BY:
      to: Person
      cardinality: many
      description: Current or past owners
    
    LOCATED_AT:
      to: Location
      cardinality: one
      description: Current physical location
    
    RELATED_TO:
      to: [Item, DigitalItem]
      cardinality: many
      symmetric: true
      description: Associated or similar items
    
    USED_IN:
      to: Activity
      cardinality: many
      description: Activities where this item is used
    
    PART_OF:
      to: Collection
      cardinality: many
      description: Collections this item belongs to
    
    DOCUMENTED_BY:
      to: DigitalItem
      cardinality: many
      description: Digital files that document this physical item

DigitalItem:
  description: >
    Any digital file, document, photo, video, or online resource.
    For physical objects, use Item instead.
  
  core_properties:
    name:
      type: String
      required: true
      description: File name or title
    
    content_type:
      type: String
      required: true
      description: Type of digital content (photo, document, video, audio, etc.)
    
    created_at:
      type: DateTime
      required: true
    
    updated_at:
      type: DateTime
      required: true

  standard_properties:
    description:
      type: Text
      description: Description of the digital content
    
    file_path:
      type: String
      description: Local file system path
    
    file_size:
      type: Number
      description: File size in bytes
    
    url:
      type: String
      description: Web URL or cloud storage location
    
    mime_type:
      type: String
      description: MIME type (image/jpeg, application/pdf, etc.)
    
    date_created:
      type: DateTime
      description: When the digital content was originally created
    
    source:
      type: String
      description: Where this digital item came from

  dynamic_properties:
    description: >
      Digital content-specific properties stored as JSONB. Examples:
      
      Photo: {resolution: "4032x3024", camera: "iPhone 13", gps_location: "40.7128,-74.0060", people: ["John", "Jane"], photo_of: "truck license plate"}
      
      Document: {format: "PDF", pages: 10, language: "English", document_type: "receipt", vendor: "Toyota Dealership"}
      
      Video: {duration: 120, resolution: "1920x1080", codec: "h264", frame_rate: 30, audio_tracks: 2}
      
      Audio: {duration: 180, bitrate: 320, format: "mp3", artist: "John Doe", album: "My Album"}
      
      Archive: {compression: "zip", files_count: 25, extracted_size: 1024000, password_protected: false}

  relations:
    CREATED_BY:
      to: Person
      cardinality: one
      description: Who created this digital item
    
    OWNED_BY:
      to: Person
      cardinality: many
      description: Who has access to this digital item
    
    STORED_AT:
      to: Location
      cardinality: many
      description: Cloud or physical storage locations
    
    DOCUMENTS:
      to: [Item, Person, Location, Activity]
      cardinality: many
      description: What this digital item is about or documents
    
    RELATED_TO:
      to: [DigitalItem, Item]
      cardinality: many
      symmetric: true
      description: Associated digital or physical items
    
    PART_OF:
      to: Collection
      cardinality: many
      description: Collections this digital item belongs to
    
    VERSION_OF:
      to: DigitalItem
      cardinality: one
      description: Original file this is a version of

Activity:
  description: >
    Any event, task, project, meeting, or time-based activity.
    Covers everything from daily tasks to major life events.
  
  core_properties:
    name:
      type: String
      required: true
      description: Activity name or title
    
    activity_type:
      type: String
      required: true
      description: Type of activity (task, event, project, meeting, etc.)
    
    created_at:
      type: DateTime
      required: true
    
    updated_at:
      type: DateTime
      required: true

  standard_properties:
    description:
      type: Text
      description: Detailed description of the activity
    
    start_date:
      type: DateTime
      description: When the activity starts or is due
    
    end_date:
      type: DateTime
      description: When the activity ends or was completed
    
    status:
      type: String
      description: Current status (planned, active, completed, cancelled)
    
    priority:
      type: String
      description: Priority level (low, medium, high, urgent)
    
    completion_percentage:
      type: Number
      description: Progress percentage (0-100)

  dynamic_properties:
    description: >
      Activity-specific properties. Examples:
      
      Task: {due_date: "2025-07-20", estimated_hours: 3, tags: ["work", "urgent"]}
      
      Event: {attendee_count: 50, dress_code: "casual", rsvp_required: true}
      
      Project: {budget: 10000, deliverables: ["design", "development"], client: "Acme Corp"}
      
      Meeting: {agenda: "Q4 planning", meeting_type: "video", recording_url: "https://..."}

  relations:
    ASSIGNED_TO:
      to: Person
      cardinality: many
      description: People responsible for this activity
    
    INVOLVES:
      to: Person
      cardinality: many
      description: People participating in this activity
    
    TAKES_PLACE_AT:
      to: Location
      cardinality: one
      description: Where the activity happens
    
    USES:
      to: [Item, DigitalItem]
      cardinality: many
      description: Items needed for this activity (physical and digital)
    
    DEPENDS_ON:
      to: Activity
      cardinality: many
      description: Prerequisites or dependencies
    
    PART_OF:
      to: Activity
      cardinality: one
      description: Parent activity or project

Collection:
  description: >
    Any grouping or list of related items - shopping lists, photo albums, 
    project collections, categorized groups of things.
  
  core_properties:
    name:
      type: String
      required: true
      description: Collection name or title
    
    collection_type:
      type: String
      required: true
      description: Type of collection (list, album, category, set, etc.)
    
    created_at:
      type: DateTime
      required: true
    
    updated_at:
      type: DateTime
      required: true

  standard_properties:
    description:
      type: Text
      description: Purpose or description of this collection
    
    item_count:
      type: Number
      description: Number of items in this collection
    
    is_ordered:
      type: Boolean
      description: Whether the order of items matters
    
    is_public:
      type: Boolean
      default: false
      description: Whether this collection can be shared

  dynamic_properties:
    description: >
      Collection-specific properties. Examples:
      
      Shopping List: {store: "Whole Foods", budget: 150, urgency: "this week"}
      
      Photo Album: {event: "Wedding 2023", camera_used: "Canon EOS", location: "Beach"}
      
      Book Collection: {genre: "Science Fiction", read_status: "in_progress", rating_system: "5_star"}
      
      Tool Set: {brand: "DeWalt", storage_location: "garage", last_inventory: "2025-07-01"}

  relations:
    CONTAINS:
      to: [Item, DigitalItem, Activity, Information]
      cardinality: many
      description: Items included in this collection
    
    OWNED_BY:
      to: Person
      cardinality: many
      description: People who can access or modify this collection
    
    RELATED_TO:
      to: Collection
      cardinality: many
      symmetric: true
      description: Related or similar collections

Information:
  description: >
    Any piece of knowledge, note, idea, or information that doesn't fit other categories.
    Covers notes, thoughts, research, quotes, facts, etc.
  
  core_properties:
    title:
      type: String
      required: true
      description: Title or brief description of this information
    
    content:
      type: Text
      required: true
      description: The actual information or note content
    
    created_at:
      type: DateTime
      required: true
    
    updated_at:
      type: DateTime
      required: true

  standard_properties:
    content_type:
      type: String
      description: Type of content (note, idea, fact, quote, research, etc.)
    
    source:
      type: String
      description: Where this information came from
    
    tags:
      type: Array
      description: Keywords or categories for organization
    
    importance:
      type: String
      description: How important this information is (low, medium, high)
    
    is_private:
      type: Boolean
      default: true
      description: Whether this is private or can be shared

  dynamic_properties:
    description: >
      Content-specific properties. Examples:
      
      Research Note: {topic: "AI", sources: ["book", "article"], confidence: "high"}
      
      Quote: {author: "Einstein", context: "relativity theory", language: "English"}
      
      Recipe: {cuisine: "Italian", prep_time: 30, difficulty: "medium", serves: 4}
      
      Idea: {category: "business", feasibility: "high", resources_needed: ["time", "money"]}

  relations:
    CREATED_BY:
      to: Person
      cardinality: one
      description: Who created this information
    
    ABOUT:
      to: [Person, Location, Item, DigitalItem, Activity]
      cardinality: many
      description: What entities this information relates to
    
    REFERENCES:
      to: Information
      cardinality: many
      description: Other information this builds upon or cites
    
    TAGGED_WITH:
      to: Collection
      cardinality: many
      description: Collections or categories this information belongs to

# ======================
# PROPERTY TYPE DEFINITIONS
# ======================

property_types:
  String:
    description: Text value up to 255 characters
    storage: VARCHAR(255)
  
  Text:
    description: Long text content, unlimited length
    storage: TEXT
  
  Email:
    description: Valid email address
    storage: VARCHAR(255)
    validation: email_format
  
  DateTime:
    description: Date and time in ISO 8601 format
    storage: TIMESTAMP
  
  Date:
    description: Date only (YYYY-MM-DD)
    storage: DATE
  
  Number:
    description: Numeric value (integer or decimal)
    storage: DECIMAL
  
  Boolean:
    description: True or false value
    storage: BOOLEAN
  
  Array:
    description: Array of values stored as JSON
    storage: JSONB
  
  JSONB:
    description: Dynamic properties stored as JSON with binary indexing
    storage: JSONB
    note: Used for all dynamic_properties fields

# ======================
# USAGE GUIDELINES
# ======================

usage_guidelines:
  dynamic_properties:
    - Store unlimited custom properties as JSONB
    - No schema validation required for dynamic properties
    - Indexable and queryable with PostgreSQL/Neo4j JSON functions
    - Examples encourage LLM to use appropriate property names
  
  entity_creation:
    - Always include core_properties (required)
    - Include relevant standard_properties when available
    - Add dynamic_properties for type-specific attributes
    - Use descriptive names for dynamic properties
  
  relationships:
    - Connect entities through defined relationship types
    - Add custom relationship properties as needed
    - Consider bidirectional relationships for navigation
  
  best_practices:
    - Keep entity types generic and high-level
    - Use dynamic_properties for specialization
    - Prefer consistent naming in dynamic_properties
    - Document important dynamic_properties in notes